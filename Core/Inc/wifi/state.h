#ifndef INC_WIFI_STATE_H_
#define INC_WIFI_STATE_H_

#include "epoch.h"
#include "parser/access_point.h"
#include "parser/token.h"
#include "state_machine.h"

typedef enum WifiState {
	WIFI_STATE_MODULE_WAIT_FOR_READY,
	WIFI_STATE_GET_FIRMWARE_INFO,
	WIFI_STATE_GETTING_FIRMWARE_INFO,
	WIFI_STATE_PRINTING_FIRMWARE_INFO,
	WIFI_STATE_WAITING_FOR_FIRMWARE_OK,
	WIFI_STATE_FIRMWARE_INFO_SUCCESS,
	WIFI_STATE_FIRMWARE_INFO_ERROR,
	WIFI_STATE_ENABLE_WIFI,
	WIFI_STATE_ENABLING,
	WIFI_STATE_ENABLING_SUCCESS,
	WIFI_STATE_ENABLING_ERROR,
	WIFI_STATE_SCAN_NETWORKS,
	WIFI_STATE_SCANNING,
	WIFI_STATE_SCANNING_NETWORK_FOUND,
	WIFI_STATE_SCANNING_ERROR,
	WIFI_STATE_SCANNING_NETWORK_MISS,
	WIFI_STATE_SCANNING_DONE,
	WIFI_STATE_CONNECT_NETWORK,
	WIFI_STATE_CONNECTING,
	WIFI_STATE_CONNECTED,
	WIFI_STATE_CONNECTING_ERROR,
	WIFI_STATE_SET_CONNECTION_MODE,
	WIFI_STATE_SETTING_CONNECTION_MODE,
	WIFI_STATE_CONNECTION_MODE_SET,
	WIFI_STATE_CONNECTION_MODE_ERROR,
	WIFI_STATE_CONFIGURE_SNTP,
	WIFI_STATE_CONFIGURING_SNTP,
	WIFI_STATE_SNTP_CONFIGURATION_DONE,
	WIFI_STATE_SNTP_CONFIGURATION_ERROR,
	WIFI_STATE_UPDATE_SNTP_TIME,
	WIFI_STATE_UPDATING_SNTP_TIME,
	WIFI_STATE_SNTP_QUERY_RETRY,
	WIFI_STATE_UPDATING_SNTP_TIME_NOT_READY,
	WIFI_STATE_SNTP_UPDATE_ERROR,
	WIFI_STATE_SNTP_UPDATE_DONE,
	WIFI_STATE_GET_TIME,
	WIFI_STATE_GETTING_TIME,
	WIFI_STATE_TIME_RECEIVED,
	WIFI_STATE_GOT_TIMESTAMP_TOKEN,
	WIFI_STATE_TIME_PARSING,
	WIFI_STATE_TIME_ERROR,
	WIFI_STATE_WIFI_READY,
	WIFI_STATE_RESET,
	WIFI_STATE_RESETTING,
	WIFI_STATE_RESETTING_SUCCESS,
	WIFI_STATE_RESETTING_ERROR,
	WIFI_STATE_MAX = WIFI_STATE_RESETTING_ERROR
} WifiState;

typedef struct WifiStateMachine {
	StateMachine *const stateMachine;
	EpochTick *const	epochTick;
	uint32_t			lastSntpUpdate;
	TokenParseState		okToken;
	TokenParseState		errorToken;
	TokenParseState		gmrCommandToken;
	TokenParseState		doubleCrlfToken;
	TokenParseState		okTokenNoCRLFPrefix;
	TokenParseState		errorTokenNoCRLFPrefix;
	TokenParseState		sysTimestampToken;
	TokenParseState		sntpInvalidTime;
	TokenParseState		wifiDisconnectToken;
	AccessPoint			accessPoint;
} WifiStateMachine;

#endif /* INC_WIFI_STATE_H_ */
